name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: "20"
  YARN_CACHE_FOLDER: ~/.yarn

jobs:
  # Install dependencies and cache them
  install:
    name: Install Dependencies
    runs-on: ubuntu-latest
    outputs:
      yarn-cache-hit: ${{ steps.yarn-cache.outputs.cache-hit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Enable Corepack
        run: corepack enable

      - name: Get Yarn cache directory
        id: yarn-cache-dir
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      - name: Cache Yarn dependencies
        id: yarn-cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.yarn-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Cache node_modules
        id: node-modules-cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
            packages/config/*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install dependencies
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: yarn install --immutable

  # Lint all packages and apps
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Enable Corepack
        run: corepack enable

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
            packages/config/*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        run: yarn install --immutable

      - name: Run ESLint
        run: yarn lint

  # Format check
  format-check:
    name: Check Code Formatting
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Enable Corepack
        run: corepack enable

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
            packages/config/*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        run: yarn install --immutable

      - name: Check Prettier formatting
        run: yarn format:check

  # Build TypeScript packages
  build:
    name: Build TypeScript Projects
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Enable Corepack
        run: corepack enable

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
            packages/config/*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        run: yarn install --immutable

      - name: Build TypeScript projects
        run: yarn build

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            packages/types/dist
            packages/ui/dist
          key: ${{ runner.os }}-build-${{ github.sha }}

  # Test applications (if tests exist)
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: [install, build]
    if: always() && needs.build.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Enable Corepack
        run: corepack enable

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
            packages/config/*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Restore build artifacts
        uses: actions/cache@v4
        with:
          path: |
            packages/types/dist
            packages/ui/dist
          key: ${{ runner.os }}-build-${{ github.sha }}

      - name: Install dependencies
        run: yarn install --immutable

      - name: Run tests
        run: |
          # Run tests if they exist
          if yarn workspaces foreach --all run test --dry-run 2>/dev/null; then
            yarn workspaces foreach --all run test
          else
            echo "No test scripts found in workspaces"
          fi
        continue-on-error: true

  # Type check all TypeScript files
  typecheck:
    name: TypeScript Type Check
    runs-on: ubuntu-latest
    needs: [install, build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Enable Corepack
        run: corepack enable

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
            packages/config/*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Restore build artifacts
        uses: actions/cache@v4
        with:
          path: |
            packages/types/dist
            packages/ui/dist
          key: ${{ runner.os }}-build-${{ github.sha }}

      - name: Install dependencies
        run: yarn install --immutable

      - name: Type check
        run: yarn typecheck

  # Build apps for production (optional)
  build-apps:
    name: Build Applications
    runs-on: ubuntu-latest
    needs: [install, build, lint, format-check]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Enable Corepack
        run: corepack enable

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
            packages/config/*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Restore build artifacts
        uses: actions/cache@v4
        with:
          path: |
            packages/types/dist
            packages/ui/dist
          key: ${{ runner.os }}-build-${{ github.sha }}

      - name: Install dependencies
        run: yarn install --immutable

      - name: Build test-app
        run: yarn workspace test-app build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: app-builds-${{ github.sha }}
          path: |
            apps/*/dist
            apps/*/build
          retention-days: 7

  # Summary job that depends on all checks
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [lint, format-check, build, typecheck]
    if: always()
    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ needs.lint.result }}" == "success" && \
                "${{ needs.format-check.result }}" == "success" && \
                "${{ needs.build.result }}" == "success" && \
                "${{ needs.typecheck.result }}" == "success" ]]; then
            echo "✅ All CI checks passed!"
            exit 0
          else
            echo "❌ Some CI checks failed:"
            echo "  Lint: ${{ needs.lint.result }}"
            echo "  Format: ${{ needs.format-check.result }}"
            echo "  Build: ${{ needs.build.result }}"
            echo "  TypeCheck: ${{ needs.typecheck.result }}"
            exit 1
          fi
